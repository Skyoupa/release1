"""
üéÆ ROUTES STEAM API - INT√âGRATION √âLITE
Endpoints pour l'int√©gration Steam dans Oupafamilly
"""

from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
from auth import get_current_user
from steam_integration import (
    verify_user_steam_profile,
    get_user_steam_stats,
    steam_stats_updater,
    steam_api_manager
)
from monitoring import app_logger, log_user_action
from database import db
import re

router = APIRouter(prefix="/steam", tags=["Steam Integration"])

# ===============================================
# MOD√àLES PYDANTIC
# ===============================================

class SteamProfileRequest(BaseModel):
    steam_id: str
    
class SteamLeaderboardRequest(BaseModel):
    stat_name: str = "total_kills"
    limit: int = 20

# ===============================================
# ENDPOINTS STEAM
# ===============================================

@router.post("/verify-profile")
async def verify_steam_profile(
    request: SteamProfileRequest,
    background_tasks: BackgroundTasks,
    current_user: dict = Depends(get_current_user)
):
    """üîç V√©rifie et lie un profil Steam √† un utilisateur"""
    try:
        steam_id = request.steam_id.strip()
        
        # Validation du Steam ID
        if not _is_valid_steam_id(steam_id):
            raise HTTPException(
                status_code=400,
                detail="Steam ID invalide. Utilisez un Steam ID 64-bit."
            )
        
        # V√©rifier si le Steam ID n'est pas d√©j√† utilis√©
        existing_profile = await db.steam_profiles.find_one({"steam_id": steam_id})
        if existing_profile and existing_profile.get('user_id') != current_user['id']:
            raise HTTPException(
                status_code=409,
                detail="Ce Steam ID est d√©j√† li√© √† un autre compte."
            )
        
        # Lancer la v√©rification en arri√®re-plan
        background_tasks.add_task(
            _background_steam_verification,
            current_user['id'],
            steam_id
        )
        
        # Log de l'action
        log_user_action(current_user['id'], "steam_verification_requested", {
            "steam_id": steam_id,
            "timestamp": str(db.get_current_time())
        })
        
        app_logger.info(f"üéÆ V√©rification Steam lanc√©e: {steam_id} pour user {current_user['id']}")
        
        return {
            "message": "V√©rification Steam lanc√©e avec succ√®s",
            "steam_id": steam_id,
            "status": "processing",
            "estimated_time": "30-60 secondes"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        app_logger.error(f"‚ùå Erreur v√©rification Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la v√©rification Steam")

@router.get("/my-profile")
async def get_my_steam_profile(current_user: dict = Depends(get_current_user)):
    """üìä R√©cup√®re le profil Steam de l'utilisateur connect√©"""
    try:
        steam_stats = await get_user_steam_stats(current_user['id'])
        
        if not steam_stats:
            return {
                "verified": False,
                "message": "Aucun profil Steam li√© √† ce compte"
            }
        
        # Enrichir avec des donn√©es utilisateur
        user_data = await db.users.find_one({"id": current_user['id']})
        
        return {
            "verified": True,
            "steam_data": steam_stats,
            "user_info": {
                "username": user_data.get('username'),
                "steam_verified": user_data.get('steam_verified', False),
                "verification_level": user_data.get('steam_verification_level', 'none')
            },
            "last_updated": steam_stats.get('verified_at')
        }
        
    except Exception as e:
        app_logger.error(f"‚ùå Erreur r√©cup√©ration profil Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du profil")

@router.get("/profile/{user_id}")
async def get_user_steam_profile(user_id: str):
    """üë§ R√©cup√®re le profil Steam public d'un utilisateur"""
    try:
        steam_stats = await get_user_steam_stats(user_id)
        
        if not steam_stats or not steam_stats.get('verified'):
            raise HTTPException(
                status_code=404,
                detail="Profil Steam non trouv√© ou non v√©rifi√©"
            )
        
        # Donn√©es publiques uniquement
        public_data = {
            "verified": steam_stats['verified'],
            "verification_level": steam_stats['verification_level'],
            "profile_summary": {
                "personaname": steam_stats['profile_data'].get('personaname', 'Joueur Anonyme'),
                "avatar": steam_stats['profile_data'].get('avatar', ''),
                "profileurl": steam_stats['profile_data'].get('profileurl', ''),
                "timecreated": steam_stats['profile_data'].get('timecreated')
            },
            "cs2_stats": {
                "total_kills": steam_stats['cs2_stats'].get('total_kills', 0),
                "total_wins": steam_stats['cs2_stats'].get('total_wins', 0),
                "kd_ratio": steam_stats['cs2_stats'].get('kd_ratio', 0),
                "headshot_percentage": steam_stats['cs2_stats'].get('headshot_percentage', 0),
                "accuracy": steam_stats['cs2_stats'].get('accuracy', 0)
            },
            "badges": steam_stats.get('badges', []),
            "security_status": steam_stats['security_status']
        }
        
        return public_data
        
    except HTTPException:
        raise  
    except Exception as e:
        app_logger.error(f"‚ùå Erreur r√©cup√©ration profil Steam public: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du profil")

@router.get("/leaderboard")
async def get_steam_leaderboard(
    stat_name: str = "total_kills",
    limit: int = 20
):
    """üèÜ R√©cup√®re le leaderboard bas√© sur les stats Steam"""
    try:
        if limit > 50:
            limit = 50
            
        # Stats autoris√©es
        allowed_stats = [
            'total_kills', 'total_wins', 'kd_ratio', 
            'headshot_percentage', 'accuracy', 'total_time_played'
        ]
        
        if stat_name not in allowed_stats:
            raise HTTPException(
                status_code=400,
                detail=f"Statistique non autoris√©e. Utilisez: {', '.join(allowed_stats)}"
            )
        
        leaderboard = await steam_stats_updater.get_steam_leaderboard(stat_name, limit)
        
        # Enrichir avec les donn√©es utilisateur
        enriched_leaderboard = []
        for entry in leaderboard:
            user_data = await db.users.find_one({"id": entry['user_id']})
            
            enriched_entry = {
                "rank": len(enriched_leaderboard) + 1,
                "username": user_data.get('username', 'Joueur Anonyme') if user_data else 'Joueur Anonyme',
                "steam_name": entry.get('username', 'Inconnu'),
                "stat_value": entry.get('stat_value', 0),
                "verification_level": entry.get('verification_level', 'none'),
                "steam_id": entry.get('steam_id', '')[:8] + "..." if entry.get('steam_id') else '',  # Partiel pour la s√©curit√©
            }
            enriched_leaderboard.append(enriched_entry)
        
        return {
            "stat_name": stat_name,
            "total_players": len(enriched_leaderboard),
            "leaderboard": enriched_leaderboard,
            "last_updated": str(db.get_current_time())
        }
        
    except HTTPException:
        raise
    except Exception as e:
        app_logger.error(f"‚ùå Erreur leaderboard Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du leaderboard")

@router.post("/refresh-stats")
async def refresh_steam_stats(
    background_tasks: BackgroundTasks,
    current_user: dict = Depends(get_current_user)
):
    """üîÑ Force la mise √† jour des stats Steam de l'utilisateur"""
    try:
        # V√©rifier si l'utilisateur a un profil Steam li√©
        user_data = await db.users.find_one({"id": current_user['id']})
        if not user_data or not user_data.get('steam_verified'):
            raise HTTPException(
                status_code=400,
                detail="Aucun profil Steam li√©. Veuillez d'abord v√©rifier votre profil."
            )
        
        steam_id = user_data.get('steam_id')
        if not steam_id:
            raise HTTPException(
                status_code=400,
                detail="Steam ID manquant dans le profil utilisateur."
            )
        
        # Lancer la mise √† jour en arri√®re-plan
        background_tasks.add_task(
            _background_steam_verification,
            current_user['id'],
            steam_id
        )
        
        # Log de l'action
        log_user_action(current_user['id'], "steam_stats_refresh", {
            "steam_id": steam_id,
            "timestamp": str(db.get_current_time())
        })
        
        return {
            "message": "Mise √† jour des stats Steam lanc√©e",
            "status": "processing",
            "estimated_time": "30 secondes"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        app_logger.error(f"‚ùå Erreur refresh Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la mise √† jour")

@router.get("/match-history/{user_id}")
async def get_steam_match_history(user_id: str):
    """üìà R√©cup√®re l'historique des matchs CS2 (simul√©)"""
    try:
        # V√©rifier que l'utilisateur a un profil Steam
        user_data = await db.users.find_one({"id": user_id})
        if not user_data or not user_data.get('steam_verified'):
            raise HTTPException(
                status_code=404,
                detail="Utilisateur sans profil Steam v√©rifi√©"
            )
        
        steam_id = user_data.get('steam_id')
        if not steam_id:
            raise HTTPException(
                status_code=400,
                detail="Steam ID manquant"
            )
        
        # R√©cup√©rer l'historique (simul√© pour la d√©mo)
        match_history = await steam_api_manager.get_cs2_match_history(steam_id)
        
        if not match_history:
            return {
                "user_id": user_id,
                "steam_id": steam_id[:8] + "...",
                "matches": [],
                "message": "Aucun historique de match disponible"
            }
        
        return {
            "user_id": user_id,
            "steam_id": steam_id[:8] + "...",
            "matches": match_history.get('matches', []),
            "total_matches": len(match_history.get('matches', [])),
            "last_updated": str(db.get_current_time())
        }
        
    except HTTPException:
        raise
    except Exception as e:
        app_logger.error(f"‚ùå Erreur historique matchs Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de l'historique")

@router.get("/stats/global")
async def get_global_steam_stats():
    """üìä Statistiques globales de l'int√©gration Steam"""
    try:
        # Compter les profils v√©rifi√©s par niveau
        pipeline = [
            {"$match": {"steam_verified": True}},
            {"$group": {
                "_id": "$steam_verification_level",
                "count": {"$sum": 1}
            }}
        ]
        
        verification_levels = await db.users.aggregate(pipeline).to_list(None)
        
        # Statistiques g√©n√©rales
        total_steam_users = await db.users.count_documents({"steam_verified": True})
        total_verified_profiles = await db.steam_profiles.count_documents({"verification_data.verified": True})
        
        # Top stats moyennes
        avg_stats = await db.steam_profiles.aggregate([
            {"$match": {"verification_data.verified": True}},
            {"$group": {
                "_id": None,
                "avg_kills": {"$avg": "$verification_data.cs2_stats.total_kills"},
                "avg_wins": {"$avg": "$verification_data.cs2_stats.total_wins"},
                "avg_kd": {"$avg": "$verification_data.cs2_stats.kd_ratio"},
                "avg_accuracy": {"$avg": "$verification_data.cs2_stats.accuracy"}
            }}
        ]).to_list(1)
        
        return {
            "total_steam_users": total_steam_users,
            "total_verified_profiles": total_verified_profiles,
            "verification_levels": {level['_id']: level['count'] for level in verification_levels},
            "average_stats": avg_stats[0] if avg_stats else {},
            "last_updated": str(db.get_current_time())
        }
        
    except Exception as e:
        app_logger.error(f"‚ùå Erreur stats globales Steam: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des statistiques")

# ===============================================
# FONCTIONS UTILITAIRES
# ===============================================

def _is_valid_steam_id(steam_id: str) -> bool:
    """Valide un Steam ID 64-bit"""
    try:
        # Steam ID 64-bit est un nombre de 17 chiffres commen√ßant par 765611
        pattern = r'^765611\d{11}$'
        return bool(re.match(pattern, steam_id))
    except:
        return False

async def _background_steam_verification(user_id: str, steam_id: str):
    """T√¢che de v√©rification Steam en arri√®re-plan"""
    try:
        app_logger.info(f"üîÑ D√©marrage v√©rification Steam background: {steam_id}")
        
        verification_result = await verify_user_steam_profile(user_id, steam_id)
        
        app_logger.info(f"‚úÖ V√©rification Steam termin√©e: {steam_id} -> {verification_result.get('verification_level', 'unknown')}")
        
        # Optionnel: Envoyer une notification √† l'utilisateur
        # await send_notification(user_id, "steam_verification_complete", verification_result)
        
    except Exception as e:
        app_logger.error(f"‚ùå Erreur v√©rification Steam background: {e}")

app_logger.info("üéÆ Routes Steam API charg√©es !")