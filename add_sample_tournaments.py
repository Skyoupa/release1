#!/usr/bin/env python3
"""
Script pour ajouter des tournois d'exemple
"""

import asyncio
import sys
import os
sys.path.append('/app/backend')

from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime, timedelta
import uuid
from pathlib import Path
from dotenv import load_dotenv

# Configuration de la base de donn√©es
ROOT_DIR = Path(__file__).parent / 'backend'
load_dotenv(ROOT_DIR / '.env')

mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

async def add_sample_tournaments():
    """Ajouter des tournois d'exemple"""
    try:
        print("üèÜ Ajout de tournois d'exemple...")
        
        # R√©cup√©rer l'admin
        admin = await db.users.find_one({"role": "admin"})
        if not admin:
            print("‚ùå Aucun admin trouv√©")
            return False
        
        admin_id = admin["id"]
        
        # Tournois d'exemple
        tournaments = [
            {
                "id": str(uuid.uuid4()),
                "title": "üéØ Tournoi CS2 D√©butants",
                "description": """
Tournoi sp√©cialement con√ßu pour les joueurs d√©butants et interm√©diaires de Counter-Strike 2.

**Format:** √âlimination simple
**Maps:** Dust2, Mirage, Inferno
**R√®gles:** Format BO1 puis BO3 en finale

Venez d√©couvrir la comp√©tition dans une ambiance d√©tendue et familiale ! 
Tous les niveaux sont les bienvenus.
                """,
                "game": "cs2",
                "tournament_type": "elimination",
                "max_participants": 16,
                "entry_fee": 0.0,
                "prize_pool": 100.0,
                "status": "open",
                "registration_start": datetime.utcnow(),
                "registration_end": datetime.utcnow() + timedelta(days=7),
                "tournament_start": datetime.utcnow() + timedelta(days=10),
                "tournament_end": None,
                "rules": """
# R√®glement du Tournoi CS2 D√©butants

## Format
- √âlimination simple
- BO1 jusqu'en demi-finale
- BO3 en finale

## Maps
- Dust2, Mirage, Inferno, Cache, Overpass

## R√®gles g√©n√©rales
1. Respect obligatoire entre tous les participants
2. Ponctualit√© exig√©e (5min de retard = d√©faite)
3. Screenshots des r√©sultats obligatoires
4. Aucun cheat ou programme externe autoris√©

## Prix
- 1er place: 50‚Ç¨
- 2√®me place: 30‚Ç¨ 
- 3√®me place: 20‚Ç¨
                """,
                "organizer_id": admin_id,
                "participants": [],
                "matches": [],
                "winner_id": None,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()),
                "title": "‚öîÔ∏è League of Legends Cup",
                "description": """
Tournoi League of Legends en √©quipes de 5 joueurs.

**Format:** Bracket double √©limination
**Niveau:** Tous niveaux accept√©s
**R√©compenses:** Coins et badges exclusifs

Formez vos √©quipes et prouvez votre valeur sur la Faille !
                """,
                "game": "lol",
                "tournament_type": "bracket",
                "max_participants": 8,
                "entry_fee": 0.0,
                "prize_pool": 200.0,
                "status": "draft",
                "registration_start": datetime.utcnow() + timedelta(days=3),
                "registration_end": datetime.utcnow() + timedelta(days=14),
                "tournament_start": datetime.utcnow() + timedelta(days=17),
                "tournament_end": None,
                "rules": """
# R√®glement LoL Cup

## Format d'√©quipe
- 5 joueurs par √©quipe
- 1 rempla√ßant autoris√©

## Format de jeu
- Double √©limination
- BO3 en finale
- BO1 le reste du temps

## R√®gles
1. Draft pick mode uniquement
2. Pause maximum 5 minutes par match
3. Remake autoris√© si bug majeur
4. Comportement sportif obligatoire

## R√©compenses
- √âquipe gagnante: 200 coins chacun + badge
- Finaliste: 100 coins chacun
                """,
                "organizer_id": admin_id,
                "participants": [],
                "matches": [],
                "winner_id": None,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()),
                "title": "üè∞ Tournoi WoW PvP Arena",
                "description": """
Comp√©tition PvP en ar√®ne 2v2 sur World of Warcraft.

**Format:** Round Robin puis Playoffs
**Niveau:** Exp√©riment√© recommand√©
**Saison:** Dragonflight S4

Montrez vos comp√©tences PvP dans l'ar√®ne !
                """,
                "game": "wow",
                "tournament_type": "round_robin",
                "max_participants": 12,
                "entry_fee": 0.0,
                "prize_pool": 150.0,
                "status": "open",
                "registration_start": datetime.utcnow(),
                "registration_end": datetime.utcnow() + timedelta(days=5),
                "tournament_start": datetime.utcnow() + timedelta(days=8),
                "tournament_end": None,
                "rules": """
# R√®glement Tournoi WoW PvP

## Format
- Ar√®ne 2v2
- Round Robin puis playoffs top 4
- BO3 en phases finales

## Restrictions
- Niveau maximum uniquement
- √âquipement PvP autoris√©
- Consommables PvP standard

## R√®gles de conduite
1. Fair-play obligatoire
2. Pas de toxicit√© en chat
3. Signaler les bugs majeurs
4. Stream/Record recommand√©

## Prix
- Champion: 75‚Ç¨
- Vice-champion: 50‚Ç¨
- 3√®me place: 25‚Ç¨
                """,
                "organizer_id": admin_id,
                "participants": [],
                "matches": [],
                "winner_id": None,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            }
        ]
        
        # Ins√©rer tous les tournois
        for tournament in tournaments:
            await db.tournaments.insert_one(tournament)
        
        print(f"‚úÖ {len(tournaments)} tournois ajout√©s avec succ√®s")
        
        # V√©rification
        total_tournaments = await db.tournaments.count_documents({})
        print(f"üìä Total tournois en base: {total_tournaments}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False
    finally:
        client.close()

if __name__ == "__main__":
    success = asyncio.run(add_sample_tournaments())
    exit(0 if success else 1)